"""
По введенным целочисленным координатам 3 точек на плоскости вычисляет стороны образованного треугольника и
длину медианы, проведенной из наименьшего угла.
Определить, является ли треугольник равнобедренным.
Далее вводятся координаты точки. Определить, находится ли она внутри треугольника. Если да, то найти расстояние от точки
до наиболее удаленной стороны треугольника или ее продолжения.
Яремчук Иван Валерьевич
ИУ7-16Б
"""


# Расстояние между двумя точками (point1, point2 - массивы из 2 элементов, сосоответсвующих координатам x и y)
def len_segment(point1, point2):
    return ((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2) ** 0.5


# Расстояние от точки до прямой, заданной 2 точками
# point, line_p1, line_p2 - массивы из 2 элементов, сосоответсвующих координатам x и y
def distance(point, line_p1, line_p2):
    return abs((line_p2[1] - line_p1[1]) * point[0] - (line_p2[0] - line_p1[0]) * point[1]
               + line_p2[0] * line_p1[1] - line_p2[1] * line_p1[0]) / len_segment(line_p1, line_p2)


# определяет знак числа num
def sign(num):
    if num > 0:
        return 1
    if num == 0:
        return 0
    return -1


# Ограничивает число num 5 знаками после запятой для вывода
def out_form(num):
    return format(num, '.5g')


# Ввод координат 3 точек
# A, B, C - массивы из двух элементов, соответсвующих координатам x и y 3 точек
# eps - точность проверки
eps = 0.0001
A = [int(i) for i in input("Введите через пробел 2 целочисленные координаты 1 точки треугольника:").split()]
B = [int(i) for i in input("Введите через пробел 2 целочисленные координаты 2 точки треугольника:").split()]
C = [int(i) for i in input("Введите через пробел 2 целочисленные координаты 3 точки треугольника:").split()]
if len(A) != 2 or len(B) != 2 or len(C) != 2:
    exit("Вводите по 2 координаты на точку")
if A == B or B == C or A == C:
    exit("Точки не должны совпадать")
if ((B[0] - A[0]) * (C[1] - A[1]) - (C[0] - A[0]) * (B[1] - A[1])) == 0:
    exit("3 точки лежат на одной прямой, это не треугольник")
# AB, BC, AC - длины соответсвующих сторон
# Находим длины сторон
AB = len_segment(A, B)
BC = len_segment(B, C)
AC = len_segment(A, C)
# med - длина медианы
# Считаем длину медианы из меньшего угла
if AB <= BC and AB <= AC:
    med = (2 * AC * AC + 2 * BC * BC - AB * AB) ** 0.5 / 2
elif BC <= AB and BC <= AC:
    med = (2 * AB * AB + 2 * AC * AC - BC * BC) ** 0.5 / 2
else:
    med = (2 * AB * AB + 2 * BC * BC - AC * AC) ** 0.5 / 2
# Вывод длин сторон, медианы меньшего угла и является ли треугольник р/б
print("1 сторона - {}, 2 сторона - {}, 3 сторона - {}".format(out_form(AB), out_form(BC), out_form(AC)))
print("Медиана меньшего угла - {}".format(out_form(med)))
if abs(AB - BC) <= eps or abs(BC - AC) <= eps or abs(AB - AC) <= eps:
    print("Треугольник является равнобедренным")
else:
    print("Треугольник не является равнобедренным")
# Вводятся координаты точки
# D - массив из двух элементов, соответсвующих координатам x и y точки
D = [int(i) for i in input("Введите через пробел 2 целочисленные координаты точки:").split()]
if len(D) != 2:
    exit("Вводите по 2 координаты на точку")
# vec1, vec2, vec3 - векторные проимзведения, нужные для расчетов
vec1 = (A[0] - D[0]) * (B[1] - A[1]) - (B[0] - A[0]) * (A[1] - D[1])
vec2 = (B[0] - D[0]) * (C[1] - B[1]) - (C[0] - B[0]) * (B[1] - D[1])
vec3 = (C[0] - D[0]) * (A[1] - C[1]) - (A[0] - C[0]) * (C[1] - D[1])
# Математическое определение положения точки
if sign(vec1) == sign(vec2) and sign(vec2) == sign(vec3):
    print("Точка лежит внутри треугольника")
    # dist - расстояние от точки до максимально удаленной стороны или ее продолжения
    dist = max(distance(D, A, B), distance(D, B, C), distance(D, A, C))
    # Выводим расстояние
    print("Расстояние от точки до максимально удаленной стороны - {}".format(out_form(dist)))
else:
    print("Точка не лежит внутри треугольника")
